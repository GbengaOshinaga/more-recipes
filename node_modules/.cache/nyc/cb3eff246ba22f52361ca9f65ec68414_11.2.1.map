{"version":3,"sources":["Recipes.js"],"names":["Recipes","_recipes","id","name","details","ingredients","upvotes","reviews","recipe","recipes","length","push","format","sort","modifiedRecipe","i","Number","splice","undefined","review","addedReview","leftArray","rightArray","array","shift","concat","slice","middle","Math","floor","left","right","mergeDes","mergeAsc","ids"],"mappings":"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","file":"Recipes.js","sourceRoot":"C:/Users/gbenga.oshinaga/Documents/Andela/more-recipes/more-recipes/server/models","sourcesContent":["\r\n/**\r\n *Recipes Entity class to provide data\r\n */\r\nexport default class Recipes {\r\n  /**\r\n     * Constructor\r\n     */\r\n  constructor() {\r\n    this._recipes = [\r\n      {\r\n        id: 1,\r\n        name: 'Recipe Name',\r\n        details: 'Recipe Details',\r\n        ingredients: 'Ingredients',\r\n        upvotes: 20,\r\n        reviews: ['Love it', 'Hate it']\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Second Recipe',\r\n        details: 'More Details',\r\n        ingredients: 'New Ingredients',\r\n        upvotes: 40,\r\n        reviews: ['I Love it', 'I Hate it']\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Third Recipe',\r\n        details: 'More Details',\r\n        ingredients: 'New Ingredients',\r\n        upvotes: 10,\r\n        reviews: ['I Love it', 'I Hate it']\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Method to add to the recipe\r\n   * @param {*} recipe\r\n   * @returns {Recipes} added recipe\r\n   */\r\n  addRecipe(recipe) {\r\n    recipe.id = this.recipes.length + 1;\r\n    this._recipes.push(recipe);\r\n    return this.recipes[this.recipes.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Method returns all recipes\r\n   * @returns {Recipes} recipes\r\n   */\r\n  get recipes() {\r\n    return this._recipes;\r\n  }\r\n\r\n  /**\r\n   * Returns sorted recipes\r\n   */\r\n  getSortedRecipes(format) {\r\n    return this.sort(this._recipes, format);\r\n  }\r\n\r\n  /**\r\n   * Modifies a recipe\r\n   * @param {*} id\r\n   * @param {*} recipe\r\n   * @returns {Recipes} recipes\r\n   */\r\n  modifyRecipe(id, recipe) {\r\n    let modifiedRecipe;\r\n    for (const i in this._recipes) {\r\n      if (this._recipes[i].id === Number(id)) {\r\n        this._recipes[i].name = recipe.name;\r\n        this._recipes[i].details = recipe.details;\r\n        this._recipes[i].ingredients = recipe.ingredients;\r\n        modifiedRecipe = this._recipes[i];\r\n      }\r\n    }\r\n    return modifiedRecipe;\r\n  }\r\n\r\n  /**\r\n   * Deletes the specified recipe\r\n   * @param {*} id\r\n   */\r\n  deleteRecipe(id) {\r\n    let recipe;\r\n    for (let i = 0; i < this._recipes.length; i++) {\r\n      if (this._recipes[i].id === Number(id)) {\r\n        recipe = this._recipes.splice(i, 1);\r\n      }\r\n    }\r\n    if(recipe === undefined){\r\n      return ['Id does not exist'];\r\n    }else{\r\n      return recipe;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a review to a recipe\r\n   * @param {*} id \r\n   * @param {*} review \r\n   */\r\n  addReview(id, review) {\r\n    let addedReview;\r\n    for(let i = 0; i<this._recipes.length; i++){\r\n      if(this._recipes[i].id === Number(id)){\r\n        if(this._recipes.reviews){\r\n          this._recipes[i].reviews.push(review);\r\n        }else{\r\n          this._recipes[i].reviews = [];\r\n          this._recipes[i].reviews.push(review);\r\n        }\r\n        addedReview = this._recipes[i];\r\n      }\r\n    }\r\n    return addedReview;\r\n  }\r\n\r\n  /**\r\n   * Sorts in descending order and merges the left and right array\r\n   * @param {*} leftArray\r\n   * @param {*} rightArray\r\n   * @returns {Array} merged sorted recipes\r\n   */\r\n  mergeDes(leftArray, rightArray) {\r\n    const array = [];\r\n\r\n    while (leftArray.length && rightArray.length) {\r\n      if (leftArray[0].upvotes > rightArray[0].upvotes) {\r\n        array.push(leftArray.shift());\r\n      } else {\r\n        array.push(rightArray.shift());\r\n      }\r\n    }\r\n    return array.concat(leftArray.slice()).concat(rightArray.slice());\r\n  }\r\n\r\n  /**\r\n   * Sorts in ascending order and merges the left and right array\r\n   * @param {*} leftArray\r\n   * @param {*} rightArray\r\n   * @returns {Array} merged sorted recipes\r\n   */\r\n  mergeAsc(leftArray, rightArray) {\r\n    const array = [];\r\n\r\n    while (leftArray.length && rightArray.length) {\r\n      if (leftArray[0].upvotes < rightArray[0].upvotes) {\r\n        array.push(leftArray.shift());\r\n      } else {\r\n        array.push(rightArray.shift());\r\n      }\r\n    }\r\n    return array.concat(leftArray.slice()).concat(rightArray.slice());\r\n  }\r\n\r\n  /**\r\n   * Recursively splits the recipes array and\r\n   * passes it to the merge method to be sorted\r\n   * @param {*} array recipes to be sorted\r\n   * @returns {Array} sorted array\r\n   */\r\n  sort(array, format) {\r\n    if (array.length < 2) {\r\n      return array;\r\n    }\r\n    const middle = Math.floor(array.length / 2);\r\n    const left = array.slice(0, middle);\r\n    const right = array.slice(middle);\r\n    if(format === 'des'){\r\n      return this.mergeDes(this.sort(left, 'des'), this.sort(right, 'des'));\r\n    }else{\r\n      return this.mergeAsc(this.sort(left), this.sort(right));\r\n    }\r\n  }\r\n\r\n  getRecipesIDs(){\r\n    let ids = [];\r\n    for(let i = 0; i<this._recipes.length; i++){\r\n      ids.push(this._recipes[i].id);\r\n    }\r\n    return ids;\r\n  }\r\n}\r\n\r\n"]}