{"version":3,"sources":["RecipeValidator.js"],"names":["RecipeValidator","recipe","errors","recipeName","recipeDetail","ingredients","push","sort","order","id","Number","recipes","ids","getRecipesIDs","isFound","i","length"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,e;;;;;;;sCAEIC,M,EAAO;AACxB,gBAAIC,SAAS,EAAb;AACA,gBAAG,EAAED,OAAOE,UAAP,IAAqBF,OAAOG,YAA5B,IAA4CH,OAAOI,WAArD,CAAH,EAAqE;AACjEH,uBAAOI,IAAP,CAAY,uDAAZ;AACH;AACD,mBAAOJ,MAAP;AACH;;;uCAEqBK,I,EAAMC,K,EAAM;AAC9B,gBAAIN,SAAS,EAAb;AACA,gBAAGK,SAAS,SAAZ,EAAsB;AAClBL,uBAAOI,IAAP,CAAY,mDAAmDC,IAA/D;AACH;;AAED,gBAAGC,UAAU,KAAV,IAAmBA,UAAU,KAAhC,EAAsC;AAClCN,uBAAOI,IAAP,CAAY,oEAAoEE,KAAhF;AACH;AACD,mBAAON,MAAP;AACH;;;kCAEgBO,E,EAAG;AAChB,gBAAIP,SAAS,EAAb;AACA,gBAAGQ,OAAOD,EAAP,KAAc,CAAjB,EAAmB;AACfP,uBAAOI,IAAP,CAAY,oCAAZ;AACH;AACD,gBAAIK,UAAU,uBAAd;AACA,gBAAIC,MAAMD,QAAQE,aAAR,EAAV;AACA,gBAAIC,gBAAJ;AACA,iBAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIH,IAAII,MAAvB,EAA+BD,GAA/B,EAAmC;AAChC,oBAAGH,IAAIG,CAAJ,MAAWL,OAAOD,EAAP,CAAd,EAAyB;AACrBK,8BAAU,IAAV;AACH;AACH;AACD,gBAAG,CAACA,OAAJ,EAAY;AACRZ,uBAAOI,IAAP,CAAY,mBAAZ;AACH;AACD,mBAAOJ,MAAP;AACH;;;;;;kBAvCgBF,e","file":"RecipeValidator.js","sourceRoot":"C:/Users/gbenga.oshinaga/Documents/Andela/more-recipes/more-recipes/server/validator","sourcesContent":["import Recipes from '../models/Recipes';\r\n\r\nexport default class RecipeValidator{\r\n\r\n    static isRecipeValid(recipe){\r\n        let errors = [];\r\n        if(!(recipe.recipeName && recipe.recipeDetail && recipe.ingredients)){\r\n            errors.push('Recipe Name, Description and Ingredients are required');\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    static areParamsValid(sort, order){\r\n        let errors = [];\r\n        if(sort !== 'upvotes'){\r\n            errors.push('sort parameter must be upvotes, instead found ' + sort);\r\n        }\r\n        \r\n        if(order !== 'asc' && order !== 'des'){\r\n            errors.push('Invalid order parameter, must be \"asc\" or \"des\", instead found ' + order);\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    static isIDValid(id){\r\n        let errors = [];\r\n        if(Number(id) <= 0){\r\n            errors.push('Id cannot be 0 or a negative value');\r\n        }\r\n        let recipes = new Recipes();\r\n        let ids = recipes.getRecipesIDs();\r\n        let isFound;\r\n        for(let i = 0; i < ids.length; i++){\r\n           if(ids[i] === Number(id)){\r\n               isFound = true;\r\n           } \r\n        }\r\n        if(!isFound){\r\n            errors.push('Id does not exist');\r\n        }\r\n        return errors;\r\n    }\r\n}"]}