{"version":3,"sources":["appTest.js"],"names":["should","expect","use","describe","it","done","request","get","end","err","res","have","status","body","be","a","length","eql","post","send","recipeName","recipeDetail","ingredients","to","name","equal","put","delete","review","console","log","upvotes"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,eAAKA,MAAL,EAAb;AACA,IAAIC,SAAS,eAAKA,MAAlB;AACA,eAAKC,GAAL;;AAEAC,SAAS,iBAAT,EAA4B,YAAM;AAC9BC,OAAG,2BAAH,EAAgC,UAACC,IAAD,EAAU;AACtC,uBAAKC,OAAL,gBACCC,GADD,CACK,iBADL,EAECC,GAFD,CAEK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfA,gBAAIV,MAAJ,CAAWW,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAF,gBAAIG,IAAJ,CAASb,MAAT,CAAgBc,EAAhB,CAAmBC,CAAnB,CAAqB,OAArB;AACAL,gBAAIG,IAAJ,CAASG,MAAT,CAAgBhB,MAAhB,CAAuBc,EAAvB,CAA0BG,GAA1B,CAA8B,CAA9B;AACAZ;AACH,SAPD;AAQH,KATD;;AAWAD,OAAG,uBAAH,EAA4B,UAACC,IAAD,EAAU;AAClC,uBAAKC,OAAL,gBACCY,IADD,CACM,iBADN,EAECC,IAFD,CAGI;AACIC,wBAAY,aADhB;AAEIC,0BAAc,eAFlB;AAGIC,yBAAa;AAHjB,SAHJ,EASCd,GATD,CASK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfA,gBAAIV,MAAJ,CAAWW,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAX,mBAAOS,GAAP,EAAYa,EAAZ,CAAeZ,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAX,mBAAOS,IAAIG,IAAJ,CAASW,IAAhB,EAAsBD,EAAtB,CAAyBE,KAAzB,CAA+B,aAA/B;AACApB;AACH,SAdD;AAeH,KAhBD;;AAkBAD,OAAG,yBAAH,EAA8B,UAACC,IAAD,EAAU;AACpC,uBAAKC,OAAL,gBACCoB,GADD,CACK,mBADL,EAECP,IAFD,CAGI;AACIC,wBAAY,UADhB;AAEIC,0BAAc,eAFlB;AAGIC,yBAAa;AAHjB,SAHJ,EASCd,GATD,CASK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfT,mBAAOS,GAAP,EAAYa,EAAZ,CAAeZ,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAX,mBAAOS,IAAIG,IAAJ,CAASW,IAAhB,EAAsBD,EAAtB,CAAyBE,KAAzB,CAA+B,UAA/B;AACApB;AACH,SAbD;AAcH,KAfD;;AAiBAD,OAAG,yBAAH,EAA8B,UAACC,IAAD,EAAU;AACpC,uBAAKC,OAAL,gBACCqB,MADD,CACQ,mBADR,EAECnB,GAFD,CAEK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfT,mBAAOS,GAAP,EAAYa,EAAZ,CAAeZ,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAX,mBAAOS,IAAIG,IAAJ,CAAS,CAAT,EAAYW,IAAnB,EAAyBD,EAAzB,CAA4BE,KAA5B,CAAkC,UAAlC;AACApB;AACH,SAND;AAOH,KARD;;AAUAD,OAAG,sCAAH,EAA2C,UAACC,IAAD,EAAU;AACjD,uBAAKC,OAAL,gBACCqB,MADD,CACQ,mBADR,EAECnB,GAFD,CAEK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfT,mBAAOS,IAAIG,IAAJ,CAAS,CAAT,CAAP,EAAoBU,EAApB,CAAuBE,KAAvB,CAA6B,mBAA7B;AACApB;AACH,SALD;AAMH,KAPD;;AASAD,OAAG,sCAAH,EAA2C,UAACC,IAAD,EAAU;AACjD,uBAAKC,OAAL,gBACCqB,MADD,CACQ,mBADR,EAECnB,GAFD,CAEK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfT,mBAAOS,GAAP,EAAYa,EAAZ,CAAeZ,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAX,mBAAOS,IAAIG,IAAJ,CAAS,CAAT,CAAP,EAAoBU,EAApB,CAAuBE,KAAvB,CAA6B,mBAA7B;AACApB;AACH,SAND;AAOH,KARD;;AAUAD,OAAG,uBAAH,EAA4B,UAACC,IAAD,EAAU;AAClC,uBAAKC,OAAL,gBACCY,IADD,CACM,2BADN,EAECC,IAFD,CAGI;AACIS,oBAAQ;AADZ,SAHJ,EAOCpB,GAPD,CAOK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfT,mBAAOS,GAAP,EAAYa,EAAZ,CAAeZ,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAiB,oBAAQC,GAAR,CAAYpB,IAAIG,IAAhB;AACAZ,mBAAOS,IAAIG,IAAJ,CAASW,IAAhB,EAAsBD,EAAtB,CAAyBE,KAAzB,CAA+B,eAA/B;AACApB;AACH,SAZD;AAaH,KAdD;;AAgBAD,OAAG,8CAAH,EAAmD,UAACC,IAAD,EAAU;AACzD,uBAAKC,OAAL,gBACCC,GADD,CACK,wCADL,EAECC,GAFD,CAEK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfA,gBAAIV,MAAJ,CAAWW,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAF,gBAAIG,IAAJ,CAASb,MAAT,CAAgBc,EAAhB,CAAmBC,CAAnB,CAAqB,OAArB;AACAc,oBAAQC,GAAR,CAAYpB,IAAIG,IAAJ,CAAS,CAAT,EAAYkB,OAAxB;AACA9B,mBAAOS,IAAIG,IAAJ,CAAS,CAAT,EAAYkB,OAAnB,EAA4BR,EAA5B,CAA+BE,KAA/B,CAAqC,EAArC;AACApB;AACH,SARD;AASH,KAVD;;AAYAD,OAAG,+CAAH,EAAoD,UAACC,IAAD,EAAU;AAC1D,uBAAKC,OAAL,gBACCC,GADD,CACK,wCADL,EAECC,GAFD,CAEK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfA,gBAAIV,MAAJ,CAAWW,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAF,gBAAIG,IAAJ,CAASb,MAAT,CAAgBc,EAAhB,CAAmBC,CAAnB,CAAqB,OAArB;AACAc,oBAAQC,GAAR,CAAYpB,IAAIG,IAAJ,CAAS,CAAT,EAAYkB,OAAxB;AACA9B,mBAAOS,IAAIG,IAAJ,CAAS,CAAT,EAAYkB,OAAnB,EAA4BR,EAA5B,CAA+BE,KAA/B,CAAqC,EAArC;AACApB;AACH,SARD;AASH,KAVD;AAYH,CApHD","file":"appTest.js","sourceRoot":"C:/Users/gbenga.oshinaga/Documents/Andela/more-recipes/more-recipes/server/test","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../app';\r\n\r\nlet should = chai.should();\r\nlet expect = chai.expect;\r\nchai.use(chaiHttp);\r\n\r\ndescribe('/api/v1/recipes', () => {\r\n    it('it should get all recipes', (done) => {\r\n        chai.request(app)\r\n        .get('/api/v1/recipes')\r\n        .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('array');\r\n            res.body.length.should.be.eql(3);\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should post recipe', (done) => {\r\n        chai.request(app)\r\n        .post('/api/v1/recipes')\r\n        .send(\r\n            {\r\n                recipeName: 'Recipe Name',\r\n                recipeDetail: 'Recipe Detail',\r\n                ingredients: 'Fish oil, pepper'\r\n            }\r\n        )\r\n        .end((err, res) => {\r\n            res.should.have.status(201);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body.name).to.equal('Recipe Name');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should modify recipe', (done) => {\r\n        chai.request(app)\r\n        .put('/api/v1/recipes/1')\r\n        .send(\r\n            {\r\n                recipeName: 'New Name',\r\n                recipeDetail: 'Recipe Detail',\r\n                ingredients: 'Fish oil, pepper'\r\n            }\r\n        )\r\n        .end((err, res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body.name).to.equal('New Name');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should delete recipe', (done) => {\r\n        chai.request(app)\r\n        .delete('/api/v1/recipes/1')\r\n        .end((err, res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body[0].name).to.equal('New Name');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should return \"Id does not exist\"', (done) => {\r\n        chai.request(app)\r\n        .delete('/api/v1/recipes/1')\r\n        .end((err, res) => {\r\n            expect(res.body[0]).to.equal('Id does not exist');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should return \"Id does not exist\"', (done) => {\r\n        chai.request(app)\r\n        .delete('/api/v1/recipes/5')\r\n        .end((err, res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body[0]).to.equal('Id does not exist');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should post review', (done) => {\r\n        chai.request(app)\r\n        .post('/api/v1/recipes/2/reviews')\r\n        .send(\r\n            {\r\n                review: 'I really really love this recipe'\r\n            }\r\n        )\r\n        .end((err, res) => {\r\n            expect(res).to.have.status(201);\r\n            console.log(res.body);\r\n            expect(res.body.name).to.equal('Second Recipe');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should get all recipes by ascending order', (done) => {\r\n        chai.request(app)\r\n        .get('/api/v1/recipes?sort=upvotes&order=asc')\r\n        .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('array');\r\n            console.log(res.body[1].upvotes);\r\n            expect(res.body[1].upvotes).to.equal(10);\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('it should get all recipes by descending order', (done) => {\r\n        chai.request(app)\r\n        .get('/api/v1/recipes?sort=upvotes&order=des')\r\n        .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('array');\r\n            console.log(res.body[1].upvotes);\r\n            expect(res.body[1].upvotes).to.equal(40);\r\n            done();\r\n        });\r\n    });\r\n\r\n});"]}